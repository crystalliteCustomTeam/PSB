const nodemailer = require("nodemailer")
export default async function POST(req, res) {
  try {
    const {
      name,
      email,
      phone,
      subject,
      message,
      IP,
      pageUrl,
      currentdate,
      selectedServices,
      hasPublishedBefore,
      bookType,
    } = await req.body
    const transporter = nodemailer.createTransport({
      service: "gmail",
      host: "smtp.gmail.com",
      port: 587,
      secure: true,
      auth: {
        user: "developer@infinitimediainc.com",
        pass: "hxxtyncrymffqtwm",
      },
    })
    const mailOptions = {
      from: "developer@infinitimediainc.com",
      to: ["leads@bestsellingpublisher.com", "developer@infinitimediainc.com","Brian.jeffords@bestsellingpublisher.com","lauren@infinitidigital.us"],
      subject: `New Lead Generated By Best Seller Book Publisher LP`,
      html: `<table>
        <tr>
          <th>Name</th>
          <td>${name}</td>
        </tr>
        <tr>
          <th>Email</th>
          <td>${email}</td>
        </tr>
        <tr>
          <th>Phone</th>
          <td>${phone}</td>
        </tr>
        <tr>
          <th>Subject</th>
         <td>${subject || "Not Filled"}</td> 
        </tr>
        <tr>
          <th>Message</th>
         <td>${message || "Not Filled"}</td> 
        </tr>
        <tr>
          <th>IP</th>
          <td>${IP}</td>
        </tr>
        <tr>
        <th>Page URL</th>
        <td>${pageUrl}</td>
        </tr>
        <tr>
          <th>Date</th>
          <td>${currentdate}</td>
        </tr>
        <tr>
          <th>Published Before?</th>
          <td>${hasPublishedBefore || "Not Selected"}</td> 
        </tr>
        <tr>
          <th>Book Type</th>
          <td>${bookType || "Not Selected"}</td>
        </tr>
        <tr>
          <th>Selected Services</th>
          <td>
            <ul style="list-style: decimal; padding: 0; margin: 0;">
            ${
              Array.isArray(selectedServices) && selectedServices.length > 0
                ? selectedServices
                    .map((service) => `<li>${service}</li>`)
                    .join("")
                : "No services selected"
            }
            </ul>
          </td>
        </tr>
      </table>`,
    }
    await transporter.sendMail(mailOptions)
    return res.json({ message: "Email send sucessfully", status: 200 })
  } catch (error) {
    return res.json({
      message: "Failed to send Email",
      data: error,
      status: 500,
    })
  }
}
